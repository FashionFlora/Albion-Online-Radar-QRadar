
 
  <div class="h-full pb-16 overflow-y-auto">
                <div class="container grid px-6 mx-auto">
                  <!-- With actions -->
                  <div class =" " >


                 <h2
            class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200"  >
             Ignore list
           </h2>



                <div class = "flex justify-center">


                  <div class = "flex justify-end "> 


                    <div x-data="{ isOpen: false, buttonText: 'Select' }" class="relative mr-6">
                      <!-- Container for the button and SVG icon -->


                      <button @click="isOpen = !isOpen" id="dropdownDefaultButton" data-dropdown-toggle="dropdown"  class="block w-full mt-1 text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input" type="button">
                        <div class="flex items-center">
                            <div x-text="buttonText"></div>
                            <div>
                                <svg
                                    class="w-4 h-4"
                                    aria-hidden="true"
                                    fill="currentColor"
                                    viewBox="0 0 20 20"
                                >
                                    <path
                                        fill-rule="evenodd"
                                        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                        clip-rule="evenodd"
                                    ></path>
                                </svg>
                            </div>
                        </div>
                    </button>

                      <!-- Dropdown menu -->
                      <div x-show="isOpen" @click.away="isOpen = false" class="absolute mt-2 dark:bg-gray-700  dark::text-white border border-gray-300 rounded shadow-lg" style="width: max-content;">
                        <!-- Dropdown items -->
                        <a href="#" class="block px-4 py-2 dark:text-gray-300 hover:bg-blue-100" style="width: 100%;" @click="buttonText = 'Player'; isOpen = false;">Player</a>
                        <a href="#" class="block px-4 py-2 dark:text-gray-300 hover:bg-blue-100" style="width: 100%;" @click="buttonText = 'Guild'; isOpen = false;">Guild</a>
                        <a href="#" class="block px-4 py-2 dark:text-gray-300 hover:bg-blue-100" style="width: 100%;" @click="buttonText = 'Ally'; isOpen = false;">Ally</a>
                      </div>
                    </div>



                  </div>



                    <label class="block text-sm mr-6">

                      <input 
                        id="nameInput"
                        class="block w-full mt-1 text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
                        placeholder="Name"
                      />
                    </label>
                    <button
                      id="addItem"
                      class="block mb-8 w-56 mt-1 text-sm dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:text-gray-300 dark:focus:shadow-outline-gray form-input"
                    >
                      Add item +
                    </button>



                  </div>
                  <div class="w-full overflow-hidden rounded-lg shadow-xs">
                    <div class="w-full overflow-x-auto">
                      <table class="w-full whitespace-no-wrap">
                        <thead>
                          <tr
                            class="text-xs font-semibold tracking-wide text-left text-gray-500 uppercase border-b dark:border-gray-700 bg-gray-50 dark:text-gray-400 dark:bg-gray-800"
                          >
                            <th class="px-4 py-3">Count</th>
                            <th class="px-4 py-3">Name</th>
                            <th class="px-4 py-3">Type</th>
                            <th class="px-4 py-3">Actions</th>
                          </tr>
                        </thead>
                        <tbody id = "tableBody"
                          class="bg-white divide-y dark:divide-gray-700 dark:bg-gray-800"
                        >





                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>






                               <script>



    const storedData = JSON.parse(localStorage.getItem("ignoreList")) || [];


storedData.forEach(element => {

  addItem(element.id, element.value , element.type );

});



    function addItem(i, value , type )
    {



      const counterCell = i +"counterCell";
      const tableCell = i + "tableCell"
      const tableRow = i + "tableRow"
      var tableBody = document.getElementById("tableBody");

// Create a new table row element.
var newRow = document.createElement("tr");
newRow.id = tableRow;
newRow.className=  "text-gray-700 dark:text-gray-400";

// Set the HTML content of the new row with the desired structure.
newRow.innerHTML = `
  <td class="px-4 py-3">
    <div class="flex items-center text-sm">
      <!-- Avatar with inset shadow -->
      <div>
        <p id = "${counterCell}" class="font-semibold"> ${i} </p>
      </div>
    </div>
  </td>
  <td class="px-4 py-3 text-sm">
    ${value}
  </td>
  <td class="px-4 py-3 text-xs">
    <span class="px-2 py-1 font-semibold leading-tight text-green-700 bg-green-100 rounded-full dark:bg-green-700 dark:text-green-100">
      ${type}
    </span>
  </td>
  <td class="px-4 py-3">
    <div class="flex items-center space-x-4 text-sm">
      <button id = "${tableCell}" class="flex items-center justify-between px-2 py-2 text-sm font-medium leading-5 text-purple-600 rounded-lg dark:text-gray-400 focus:outline-none focus:shadow-outline-gray" aria-label="Delete">
        <svg class="w-5 h-5" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
        </svg>
      </button>
    </div>
  </td>
`;

// Append the new row to the table body.
tableBody.appendChild(newRow);


      const button  = document.getElementById(tableCell);


      button.addEventListener("click", function(event) {


      let idx = 0;

            for (var i=0;i<tableBody.rows.length; i++){
            if ( tableBody.rows[i] == newRow ){
            idx = i;
        

            break;
            }
          }










        storedData.forEach(element => {


            const paragraphContext = document.getElementById(element.id + "counterCell");
            if(paragraphContext!=null)
            {


            if(parseInt(paragraphContext.textContent) > idx+1)
            {

              element.id = element.id -1;
              paragraphContext.textContent  = '' + element.id;
              paragraphContext.id = element.id + "counterCell";

            }
             }





        });

        storedData.splice(idx ,1);
        tableBody.removeChild(newRow);





        const updatedData = JSON.stringify(storedData);
        localStorage.setItem("ignoreList", updatedData);




      });


    }









const nameInput = document.getElementById("nameInput");

let inputValue ="";



const buttonText = document.querySelector('[x-data="{ isOpen: false, buttonText: \'Select\' }"] [x-text="buttonText"]');

// Add an event listener for the "input" event (fires when the input value changes)
nameInput.addEventListener("input", function(event) {
     inputValue = event.target.value;
});

const button = document.getElementById("addItem");

button.addEventListener("click", function(event) {




  const selectedText = buttonText.textContent;
  if(selectedText == "Select")
  {
    return;
  }

  const newItem = { id: storedData.length +1  ,  value: inputValue , type: selectedText };

  storedData.push(newItem);
  addItem(storedData.length, inputValue , selectedText )







  const updatedData = JSON.stringify(storedData);
  localStorage.setItem("ignoreList", updatedData);




});








  </script>